unit TestuFormatador;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

   uses
      TestFramework, uTipos, uFormatador;

   type
      // Test methods for class TFormatador

      TestTFormatador = class( TTestCase )
      strict private
         FFormatador: TFormatador;
      public
         procedure SetUp; override;
         procedure TearDown; override;
      published
         procedure TestLimpar;
         procedure TestPad;
         procedure TestRPad;
         procedure TestLPad;
         procedure TestMascarar;
         procedure TestColocaMascara;
         procedure TestRetiraMascara;
         procedure TestArrayToStr;
         procedure TestSplit;
      end;

implementation

   uses
      System.SysUtils, System.Classes;

   procedure TestTFormatador.SetUp;
   begin
      FFormatador := TFormatador.Create;
   end;

   procedure TestTFormatador.TearDown;
   begin
      FFormatador.Free;
      FFormatador := nil;
   end;

   procedure TestTFormatador.TestLimpar;
   var
      ReturnValue: string;
      pTexto     : string;
   begin
      pTexto := 'TEXTO';
      // TODO: Setup method call parameters
      ReturnValue := FFormatador.Limpar( pTexto );
      // TODO: Validate method results
      CheckEqualsString( EmptyStr, ReturnValue, 'Valor do Retorno ' + ReturnValue );
   end;

   procedure TestTFormatador.TestPad;
   var
      ReturnValue: string;
      pTamanho   : Integer;
      pCaracter  : Char;
   begin
      pTamanho  := 5;
      pCaracter := 'a';
      // TODO: Setup method call parameters
      ReturnValue := FFormatador.Pad( pCaracter, pTamanho );
      // TODO: Validate method results
      CheckEqualsString( 'aaaaa', ReturnValue, 'Valor do Retorno ' + ReturnValue );
   end;

   procedure TestTFormatador.TestRPad;
   var
      ReturnValue: string;
      pTamanho   : Integer;
      pCaracter  : Char;
      pTexto     : string;
   begin
      pTamanho  := 10;
      pCaracter := 'A';
      pTexto    := 'Ricardo';
      // TODO: Setup method call parameters
      ReturnValue := FFormatador.RPad( pTexto, pCaracter, pTamanho );
      // TODO: Validate method results
      CheckEqualsString( 'RicardoAAA', ReturnValue, 'Valor do Retorno ' + ReturnValue );
   end;

   procedure TestTFormatador.TestSplit;
   var
      Texto      : String;
      Delimitador: Char;
      ReturnValue: TStrings;
   begin
      Texto       := 'a,b c,d';
      Delimitador := ',';
      // TODO: Setup method call parameters
      ReturnValue := FFormatador.Split( Texto, Delimitador );
      // TODO: Validate method results
      CheckNotNull( ReturnValue, 'erro ao instanciar o objeto lista' );
      CheckEqualsString( 'a', ReturnValue[ 0 ], 'Erro teste split' );
      CheckEqualsString( 'b c', ReturnValue[ 1 ], 'Erro teste split' );
      CheckEqualsString( 'd', ReturnValue[ 2 ], 'Erro teste split' );
   end;

   procedure TestTFormatador.TestLPad;
   var
      ReturnValue: string;
      pTamanho   : Integer;
      pCaracter  : Char;
      pTexto     : string;
   begin
      pTamanho  := 10;
      pCaracter := 'A';
      pTexto    := 'Ricardo';
      // TODO: Setup method call parameters
      ReturnValue := FFormatador.LPad( pTexto, pCaracter, pTamanho );
      // TODO: Validate method results
      CheckEqualsString( 'AAARicardo', ReturnValue, 'Valor do Retorno ' + ReturnValue );
   end;

   procedure TestTFormatador.TestMascarar;
   var
      ReturnValue   : string;
      Mascara       : string;
      Texto         : string;
      pTipoDocumento: TTipoDoc;
      Aux           : Boolean;
   begin
      Aux                := True;
      for pTipoDocumento := tpCPF to tpTelefoneDDD do
         begin
            Mascara := FFormatador.Mascara[ pTipoDocumento ];
            Texto   := TFormatador.RetiraMascara( Mascara );
            // TODO: Setup method call parameters
            ReturnValue := FFormatador.Mascarar( Texto, Mascara );
            // TODO: Validate method results
            Aux := Aux and SameText( Mascara, ReturnValue );
            if not Aux then
               break;
         end;
      Assert( Aux, 'Valor do Retorno ' + ReturnValue );
   end;

   procedure TestTFormatador.TestArrayToStr;
   var
      vetor      : array [ 1 .. 3 ] of String;
      ReturnValue: String;
   begin
      vetor[ 1 ]  := 'Ricardo';
      vetor[ 2 ]  := 'Paola';
      vetor[ 3 ]  := 'Olivia';
      ReturnValue := FFormatador.ArrayToStr( vetor );
      CheckEqualsString( 'Ricardo,Paola,Olivia', ReturnValue, 'Teste Array to String' );
   end;

   procedure TestTFormatador.TestColocaMascara;
   var
      ReturnValue   : string;
      Mascara       : string;
      Texto         : string;
      pTipoDocumento: TTipoDoc;
      Aux           : Boolean;
   begin
      Aux                := True;
      for pTipoDocumento := tpCPF to tpTelefoneDDD do
         begin
            Mascara := FFormatador.Mascara[ pTipoDocumento ];
            Texto   := TFormatador.RetiraMascara( Mascara );
            // TODO: Setup method call parameters
            ReturnValue := TFormatador.ColocaMascara( pTipoDocumento, Texto );
            // TODO: Validate method results
            Aux := Aux and SameText( Mascara, ReturnValue );
            if not Aux then
               break;
         end;
      Assert( Aux, 'Valor do Retorno ' + ReturnValue );
   end;

   procedure TestTFormatador.TestRetiraMascara;
   var
      ReturnValue: string;
      pString    : string;
   begin
      pString := '123.456.789-00';
      // TODO: Setup method call parameters
      ReturnValue := TFormatador.RetiraMascara( pString );
      // TODO: Validate method results
      CheckEqualsString( '12345678900', ReturnValue, 'Valor do Retorno ' + ReturnValue );
   end;

initialization

   // Register any test cases with the test runner
   RegisterTest( TestTFormatador.Suite );

end.
